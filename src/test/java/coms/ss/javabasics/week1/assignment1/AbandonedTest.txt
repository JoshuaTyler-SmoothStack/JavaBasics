package coms.ss.javabasics.week1.assignment1;

public class AbandonedTest {
  // [TEST] calculateHashMap()
  @Test
  void calculateHashMap() {
    System.out.println("\n[TEST] SumIntsToValueWithGroupRestriction.class - calculateHashMap()");
    System.out.println("==================================");
    System.out.println("#Test | Expected | Actual");

    // Setup
    boolean isPassing = true;
    Integer[][] testCases = {
      { 1, 2, 4, 8, 1 },
      { 2, 5, 2, 3, 2 }
    };

    HashMap<String, Integer> testResult1 = new HashMap<String, Integer>();
    testResult1.put("1d0", 1);
    testResult1.put("1,1d0", 2);
    testResult1.put("2,1", 3);
    testResult1.put("4,1", 5);
    testResult1.put("4,2", 6);
    testResult1.put("8,1", 9);
    testResult1.put("8,2", 10);
    testResult1.put("8,4", 12);

    HashMap<String, Integer> testResult2 = new HashMap<String, Integer>();
    testResult2.put("2d0", 2);
    testResult2.put("2,2d0", 4);
    testResult2.put("2,2d1", 6);
    testResult2.put("3,2", 5);
    testResult2.put("5,2", 7);
    testResult2.put("5,3", 8);

    // Test
    for (int i = 0; i < testCases.length; i++) {
      try {
        HashMap<String,Integer> actual = SumIntsToValueWithGroupRestriction.calculateHashMap(testCases[i]);
        HashMap<String,Integer> expected = (i > 0) ? testResult2 : testResult1;
        String message = expected + " | " + actual;
        if (actual.equals(expected)) {
          System.out.println(i + ": " + message);
        } else {
          isPassing = false;
          System.err.println(i + ": " + message);
        }
      } catch (Exception e) {
        isPassing = false;
        System.err.println(i + ": " + e);
      }
    }

    // Assessment
    if (isPassing) {
      System.out.println("Passed");
    } else {
      System.err.println("Failed");
      fail();
    }
  }

  // [TEST] calculateHashMapRowSums()
  @Test
  void calculateHashMapRowSums() {
    System.out.println("\n[TEST] SumIntsToValueWithGroupRestriction.class - calculateHashMapRowSums()");
    System.out.println("==================================");
    System.out.println("#Test | Expected | Actual");

    // Setup
    boolean isPassing = true;
    Integer[] testCases = { 1, 2, 4, 8, 1 };
    Integer[][] testResults = {
      { 7, 11, 13, 6, 10, 2, 4 },
      { 7, 11, 4, 14, 3 },
      { 7, 13, 6, 14, 5 },
      { 11, 13, 14, 10, 9 },
    };

    // Test
    for (int i = 0; i < testResults.length; i++) {
      try {
        HashMap<String, Integer> input = SumIntsToValueWithGroupRestriction.calculateHashMap(testCases);
        Integer[] actualAsArray = SumIntsToValueWithGroupRestriction
          .calculateHashMapRowSums(input, testCases[i])
          .toArray(new Integer[0]);
        Arrays.sort(actualAsArray);
        String actual = KitUtils.arrayToString(actualAsArray);
        Arrays.sort(testResults[i]);
        String expected = KitUtils.arrayToString(testResults[i]);
        String message = expected + " | " + actual;
        if (actual.equals(expected)) {
          System.out.println(i + ": " + message);
        } else {
          isPassing = false;
          System.err.println(i + ": " + message);
        }
      } catch (Exception e) {
        isPassing = false;
        System.err.println(i + ": " + e);
      }
    }

    // Assessment
    if (isPassing) {
      System.out.println("Passed");
    } else {
      System.err.println("Failed");
      fail();
    }
  }

  // [TEST] canSumToValue()
  @Test
  void canSumToValue() {
    System.out.println("\n[TEST] SumIntsToValueWithGroupRestriction.class - canSumToValue()");
    System.out.println("==================================");
    System.out.println("#Test | Expected | Actual");

    // Setup
    boolean isPassing = true;
    Integer[][] testCases = {
      { 2, 4, 8 },
      { 1, 2, 4, 8, 1 },
      { 10, 5, 5, 3 },
      { 42, 7, 9, 12 },
      { 3, 4, 1, 7 },
      { 2, 3, 5, 7 }
    };

    Integer[] testParams = { 10, 14, 20, 4000, 9, 13 };
    Boolean[] testResults = { true, true, true, false, false, true };

    // Test
    for (int i = 0; i < testCases.length; i++) {
      try {
        Boolean actual = SumIntsToValueWithGroupRestriction.canSumToValue(testCases[i], testParams[i]);
        Boolean expected = testResults[i];
        String message = expected + " | " + actual;
        if (actual.equals(expected)) {
          System.out.println(i + ": " + message);
        } else {
          isPassing = false;
          System.err.println(i + ": " + message);
        }
      } catch (Exception e) {
        isPassing = false;
        System.err.println(i + ": " + e);
      }
    }

    // Assessment
    if (isPassing) {
      System.out.println("Passed");
    } else {
      System.err.println("Failed");
      fail();
    }
  }
}
